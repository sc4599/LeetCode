# coding= utf-8
class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        rlist = []
        if len(nums) < 3:
            return []
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                for x in range(j + 1, len(nums)):
                    if (nums[i] + nums[j] + nums[x]) == 0:
                        r = list()
                        r.append(nums[i])
                        r.append(nums[j])
                        r.append(nums[x])
                        r.sort()
                        if r not in rlist:
                            rlist.append(r)
        rlist.sort()
        return rlist

    def threeSum2(self, nums):
        """
        题意：求数列中三个数之和为0的三元组有多少个，需去重暴力枚举三个数复杂度为O(N^3)
        先考虑2Sum的做法，假设升序数列a，对于一组解ai,aj, 另一组解ak,al
        必然满足 i<k j>l 或 i>k j<l, 因此我们可以用两个指针，初始时指向数列两端
        指向数之和大于目标值时，右指针向左移使得总和减小，反之左指针向右移
        由此可以用O(N)的复杂度解决2Sum问题，3Sum则枚举第一个数O(N^2)
        使用有序数列的好处是，在枚举和移动指针时值相等的数可以跳过，省去去重部分
        :param nums:
        :return:
        """
        nums.sort()
        rlist = []
        for i in range(len(nums) - 2):
            if i and nums[i] == nums[i - 1]:
                continue # 相同的元素 则跳过循环
            target = -1*nums[i]
            left, right = i + 1, len(nums) - 1
            print i
            while left < right:
                if nums[left] + nums[right] == target:
                    rlist.append([nums[i], nums[left], nums[right]])
                    left += 1
                    right -= 1
                    while left < right and nums[left] == nums[left - 1]:
                        left += 1
                    while left < right and nums[right] == nums[right + 1]:
                        right -= 1
                    if nums[left] + nums[right] < target:
                        left += 1
                    else:
                        right -= 1
        return rlist


import unittest


class TestSolution(unittest.TestCase):
    def test_threeSum(self):
        cls = Solution()
        r = cls.threeSum([-1, 0, 1, 2, -1, -4])
        self.assertEqual(r, [[-1, -1, 2], [-1, 0, 1]])
        r = cls.threeSum(
            [-6, -8, -9, 4, -14, 6, -10, 7, 12, 13, 4, 9, 7, 14, -12, 7, 0, 14, -1, -3, 2, 2, -3, 11, -6, -10, -13, -13,
             1,
             -9, 2, 2, -2, 8, -9, 0, -9, -12, 14, 10, 8, 3, 4, 0, -6, 7, 14, 9, 6, -2, 13, -15, 8, -5, 3, -13, -8, 5,
             -11,
             0, 11, 6, -13, -14, -9, -15, -7, -11, 10, -7, 14, 4, 3, 3, 11, 13, -13, 11, -1, 0, -6, -10, 0, 9, 0, 10,
             11, 0,
             0, -14, -15, -12, -1, 10, 12, -2, 2, -10, 2, -2, -10, 2, -13, 1, 12, 5, -1, -15, 1, 5, -8, 3, 10, 8])
        self.assertEqual(r, [[-15, 1, 14], [-15, 2, 13], [-15, 3, 12], [-15, 4, 11], [-15, 5, 10], [-15, 6, 9],
                             [-15, 7, 8], [-14, 0, 14], [-14, 1, 13], [-14, 2, 12], [-14, 3, 11], [-14, 4, 10],
                             [-14, 5, 9], [-14, 6, 8], [-14, 7, 7], [-13, -1, 14], [-13, 0, 13], [-13, 1, 12],
                             [-13, 2, 11], [-13, 3, 10], [-13, 4, 9], [-13, 5, 8], [-13, 6, 7], [-12, -2, 14],
                             [-12, -1, 13], [-12, 0, 12], [-12, 1, 11], [-12, 2, 10], [-12, 3, 9], [-12, 4, 8],
                             [-12, 5, 7], [-12, 6, 6], [-11, -3, 14], [-11, -2, 13], [-11, -1, 12], [-11, 0, 11],
                             [-11, 1, 10], [-11, 2, 9], [-11, 3, 8], [-11, 4, 7], [-11, 5, 6], [-10, -3, 13],
                             [-10, -2, 12], [-10, -1, 11], [-10, 0, 10], [-10, 1, 9], [-10, 2, 8], [-10, 3, 7],
                             [-10, 4, 6], [-10, 5, 5], [-9, -5, 14], [-9, -3, 12], [-9, -2, 11], [-9, -1, 10],
                             [-9, 0, 9], [-9, 1, 8], [-9, 2, 7], [-9, 3, 6], [-9, 4, 5], [-8, -6, 14], [-8, -5, 13],
                             [-8, -3, 11], [-8, -2, 10], [-8, -1, 9], [-8, 0, 8], [-8, 1, 7], [-8, 2, 6], [-8, 3, 5],
                             [-8, 4, 4], [-7, -7, 14], [-7, -6, 13], [-7, -5, 12], [-7, -3, 10], [-7, -2, 9],
                             [-7, -1, 8], [-7, 0, 7], [-7, 1, 6], [-7, 2, 5], [-7, 3, 4], [-6, -6, 12], [-6, -5, 11],
                             [-6, -3, 9], [-6, -2, 8], [-6, -1, 7], [-6, 0, 6], [-6, 1, 5], [-6, 2, 4], [-6, 3, 3],
                             [-5, -3, 8], [-5, -2, 7], [-5, -1, 6], [-5, 0, 5], [-5, 1, 4], [-5, 2, 3], [-3, -3, 6],
                             [-3, -2, 5], [-3, -1, 4], [-3, 0, 3], [-3, 1, 2], [-2, -2, 4], [-2, -1, 3], [-2, 0, 2],
                             [-2, 1, 1], [-1, -1, 2], [-1, 0, 1], [0, 0, 0]])

    def test_threeSum2(self):
        cls = Solution()
        r = cls.threeSum2([-1, 0, 1, 2, -1, -4])
        self.assertEqual(r, [[-1, -1, 2], [-1, 0, 1]])


if __name__ == "__main__":
    unittest.main()

    pass
